// <auto-generated />
using AccountsWebApi.Models;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace AccountsWebApi.Migrations
{
    [DbContext(typeof(UserDbContext))]
    [Migration("20230317131856_initialmigration")]
    partial class initialmigration
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.14")
                .HasAnnotation("Relational:MaxIdentifierLength", 64);

            modelBuilder.Entity("AccountsWebApi.Models.Company", b =>
                {
                    b.Property<string>("companyId")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("companyEmail")
                        .IsRequired()
                        .HasColumnType("varchar(255)");

                    b.Property<string>("companyName")
                        .IsRequired()
                        .HasColumnType("varchar(255)");

                    b.Property<string>("companyPhone")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("password")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("status")
                        .HasColumnType("longtext");

                    b.Property<string>("userFirstName")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("userLastName")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.HasKey("companyId");

                    b.HasIndex("companyEmail")
                        .IsUnique();

                    b.HasIndex("companyName")
                        .IsUnique();

                    b.ToTable("companies");
                });

            modelBuilder.Entity("AccountsWebApi.Models.Department", b =>
                {
                    b.Property<int>("deptAutoId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("companyId")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("deptId")
                        .HasColumnType("longtext");

                    b.Property<string>("deptName")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("status")
                        .HasColumnType("longtext");

                    b.HasKey("deptAutoId");

                    b.HasIndex("companyId");

                    b.ToTable("departments");
                });

            modelBuilder.Entity("AccountsWebApi.Models.Employee", b =>
                {
                    b.Property<int>("employeeAutoId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("companyId")
                        .HasColumnType("varchar(255)");

                    b.Property<int>("deptAutoId")
                        .HasColumnType("int");

                    b.Property<string>("employeeContactNo")
                        .HasColumnType("longtext");

                    b.Property<string>("employeeDesignation")
                        .HasColumnType("longtext");

                    b.Property<string>("employeeFatherName")
                        .HasColumnType("longtext");

                    b.Property<string>("employeeId")
                        .HasColumnType("longtext");

                    b.Property<string>("employeeName")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("employeeeMail")
                        .HasColumnType("longtext");

                    b.Property<string>("status")
                        .HasColumnType("longtext");

                    b.HasKey("employeeAutoId");

                    b.HasIndex("companyId");

                    b.HasIndex("deptAutoId");

                    b.ToTable("employees");
                });

            modelBuilder.Entity("AccountsWebApi.Models.Facility", b =>
                {
                    b.Property<int>("facilityAutoId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("companyId")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("facilityId")
                        .HasColumnType("longtext");

                    b.Property<string>("facilityName")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("status")
                        .HasColumnType("longtext");

                    b.HasKey("facilityAutoId");

                    b.HasIndex("companyId");

                    b.ToTable("facilities");
                });

            modelBuilder.Entity("AccountsWebApi.Models.Floor", b =>
                {
                    b.Property<int>("floorAutoId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("companyId")
                        .HasColumnType("varchar(255)");

                    b.Property<int>("facilityAutoId")
                        .HasColumnType("int");

                    b.Property<string>("floorId")
                        .HasColumnType("longtext");

                    b.Property<string>("floorName")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("status")
                        .HasColumnType("longtext");

                    b.HasKey("floorAutoId");

                    b.HasIndex("companyId");

                    b.HasIndex("facilityAutoId");

                    b.ToTable("floors");
                });

            modelBuilder.Entity("AccountsWebApi.Models.Functionallocation", b =>
                {
                    b.Property<int>("flAutoId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("companyId")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("description")
                        .HasColumnType("longtext");

                    b.Property<int>("facilityAutoId")
                        .HasColumnType("int");

                    b.Property<string>("flId")
                        .HasColumnType("longtext");

                    b.Property<string>("flName")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<int>("floorAutoId")
                        .HasColumnType("int");

                    b.Property<string>("status")
                        .HasColumnType("longtext");

                    b.Property<int>("subDeptAutoId")
                        .HasColumnType("int");

                    b.HasKey("flAutoId");

                    b.HasIndex("companyId");

                    b.HasIndex("facilityAutoId");

                    b.HasIndex("floorAutoId");

                    b.HasIndex("subDeptAutoId");

                    b.ToTable("functionalLocations");
                });

            modelBuilder.Entity("AccountsWebApi.Models.Methodtype", b =>
                {
                    b.Property<int>("mtAutoId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("companyId")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("description")
                        .HasColumnType("longtext");

                    b.Property<string>("mtId")
                        .HasColumnType("longtext");

                    b.Property<string>("mtName")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("status")
                        .HasColumnType("longtext");

                    b.HasKey("mtAutoId");

                    b.HasIndex("companyId");

                    b.ToTable("methodTypes");
                });

            modelBuilder.Entity("AccountsWebApi.Models.Permission", b =>
                {
                    b.Property<string>("permissionId")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("permissionName")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("status")
                        .HasColumnType("longtext");

                    b.HasKey("permissionId");

                    b.ToTable("permissions");
                });

            modelBuilder.Entity("AccountsWebApi.Models.Position", b =>
                {
                    b.Property<int>("positionAutoId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("companyId")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("positionId")
                        .HasColumnType("longtext");

                    b.Property<string>("positionName")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("status")
                        .HasColumnType("longtext");

                    b.HasKey("positionAutoId");

                    b.HasIndex("companyId");

                    b.ToTable("positions");
                });

            modelBuilder.Entity("AccountsWebApi.Models.Priority", b =>
                {
                    b.Property<int>("priorityAutoId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("companyId")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("description")
                        .HasColumnType("longtext");

                    b.Property<string>("priorityId")
                        .HasColumnType("longtext");

                    b.Property<string>("priorityName")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("status")
                        .HasColumnType("longtext");

                    b.HasKey("priorityAutoId");

                    b.HasIndex("companyId");

                    b.ToTable("priorities");
                });

            modelBuilder.Entity("AccountsWebApi.Models.Profile", b =>
                {
                    b.Property<int>("profileAutoId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("companyId")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("profileId")
                        .HasColumnType("longtext");

                    b.Property<string>("profileName")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("status")
                        .HasColumnType("longtext");

                    b.HasKey("profileAutoId");

                    b.HasIndex("companyId");

                    b.ToTable("profiles");
                });

            modelBuilder.Entity("AccountsWebApi.Models.Role", b =>
                {
                    b.Property<int>("roleAutoId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("companyId")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("roleId")
                        .HasColumnType("longtext");

                    b.Property<string>("roleName")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("status")
                        .HasColumnType("longtext");

                    b.HasKey("roleAutoId");

                    b.HasIndex("companyId");

                    b.ToTable("roles");
                });

            modelBuilder.Entity("AccountsWebApi.Models.RoleandDepartment", b =>
                {
                    b.Property<int>("roleDeptId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("companyId")
                        .HasColumnType("varchar(255)");

                    b.Property<int>("deptAutoId")
                        .HasColumnType("int");

                    b.Property<int>("roleAutoId")
                        .HasColumnType("int");

                    b.HasKey("roleDeptId");

                    b.HasIndex("companyId");

                    b.HasIndex("deptAutoId");

                    b.HasIndex("roleAutoId");

                    b.ToTable("roleAndDepartments");
                });

            modelBuilder.Entity("AccountsWebApi.Models.RoleandPermission", b =>
                {
                    b.Property<int>("rolePermissionId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("companyId")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("permissionId")
                        .HasColumnType("varchar(255)");

                    b.Property<int>("roleAutoId")
                        .HasColumnType("int");

                    b.HasKey("rolePermissionId");

                    b.HasIndex("companyId");

                    b.HasIndex("permissionId");

                    b.HasIndex("roleAutoId");

                    b.ToTable("roleAndPermissions");
                });

            modelBuilder.Entity("AccountsWebApi.Models.RoleandUser", b =>
                {
                    b.Property<int>("roleUserId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("companyId")
                        .HasColumnType("varchar(255)");

                    b.Property<int>("roleAutoId")
                        .HasColumnType("int");

                    b.Property<int>("userAutoId")
                        .HasColumnType("int");

                    b.HasKey("roleUserId");

                    b.HasIndex("companyId");

                    b.HasIndex("roleAutoId");

                    b.HasIndex("userAutoId");

                    b.ToTable("userAndRoles");
                });

            modelBuilder.Entity("AccountsWebApi.Models.SubDepartment", b =>
                {
                    b.Property<int>("subDeptAutoId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("companyId")
                        .HasColumnType("varchar(255)");

                    b.Property<int>("deptAutoId")
                        .HasColumnType("int");

                    b.Property<string>("status")
                        .HasColumnType("longtext");

                    b.Property<string>("subDeptId")
                        .HasColumnType("longtext");

                    b.Property<string>("subDeptName")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.HasKey("subDeptAutoId");

                    b.HasIndex("companyId");

                    b.HasIndex("deptAutoId");

                    b.ToTable("subDepartments");
                });

            modelBuilder.Entity("AccountsWebApi.Models.Tool", b =>
                {
                    b.Property<int>("toolAutoId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("companyId")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("status")
                        .HasColumnType("longtext");

                    b.Property<string>("toolId")
                        .HasColumnType("longtext");

                    b.Property<string>("toolName")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.HasKey("toolAutoId");

                    b.HasIndex("companyId");

                    b.ToTable("tools");
                });

            modelBuilder.Entity("AccountsWebApi.Models.Typeofmaintenance", b =>
                {
                    b.Property<int>("tomAutoId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("companyId")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("description")
                        .HasColumnType("longtext");

                    b.Property<string>("status")
                        .HasColumnType("longtext");

                    b.Property<string>("tomId")
                        .HasColumnType("longtext");

                    b.Property<string>("tomName")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.HasKey("tomAutoId");

                    b.HasIndex("companyId");

                    b.ToTable("typeOfMaintenances");
                });

            modelBuilder.Entity("AccountsWebApi.Models.Typesofproblem", b =>
                {
                    b.Property<int>("topAutoId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("companyId")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("description")
                        .HasColumnType("longtext");

                    b.Property<string>("status")
                        .HasColumnType("longtext");

                    b.Property<string>("topId")
                        .HasColumnType("longtext");

                    b.Property<string>("topName")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.HasKey("topAutoId");

                    b.HasIndex("companyId");

                    b.ToTable("typesOfProblems");
                });

            modelBuilder.Entity("AccountsWebApi.Models.User", b =>
                {
                    b.Property<int>("userAutoId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("companyId")
                        .HasColumnType("varchar(255)");

                    b.Property<int>("deptAutoId")
                        .HasColumnType("int");

                    b.Property<int>("employeeAutoId")
                        .HasColumnType("int");

                    b.Property<string>("password")
                        .HasColumnType("longtext");

                    b.Property<string>("role")
                        .HasColumnType("longtext");

                    b.Property<string>("status")
                        .HasColumnType("longtext");

                    b.Property<string>("userId")
                        .HasColumnType("longtext");

                    b.Property<string>("userName")
                        .IsRequired()
                        .HasColumnType("varchar(255)");

                    b.HasKey("userAutoId");

                    b.HasIndex("companyId");

                    b.HasIndex("deptAutoId");

                    b.HasIndex("employeeAutoId");

                    b.HasIndex("userName")
                        .IsUnique();

                    b.ToTable("users");
                });

            modelBuilder.Entity("AccountsWebApi.Models.Userandprofile", b =>
                {
                    b.Property<int>("userAndProfileAutoId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("companyId")
                        .HasColumnType("varchar(255)");

                    b.Property<int>("profileAutoId")
                        .HasColumnType("int");

                    b.Property<int>("userAutoId")
                        .HasColumnType("int");

                    b.HasKey("userAndProfileAutoId");

                    b.HasIndex("companyId");

                    b.HasIndex("profileAutoId");

                    b.HasIndex("userAutoId");

                    b.ToTable("userAndProfiles");
                });

            modelBuilder.Entity("AccountsWebApi.Models.Department", b =>
                {
                    b.HasOne("AccountsWebApi.Models.Company", "companies")
                        .WithMany()
                        .HasForeignKey("companyId");

                    b.Navigation("companies");
                });

            modelBuilder.Entity("AccountsWebApi.Models.Employee", b =>
                {
                    b.HasOne("AccountsWebApi.Models.Company", "companies")
                        .WithMany()
                        .HasForeignKey("companyId");

                    b.HasOne("AccountsWebApi.Models.Department", "department")
                        .WithMany()
                        .HasForeignKey("deptAutoId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("companies");

                    b.Navigation("department");
                });

            modelBuilder.Entity("AccountsWebApi.Models.Facility", b =>
                {
                    b.HasOne("AccountsWebApi.Models.Company", "companies")
                        .WithMany()
                        .HasForeignKey("companyId");

                    b.Navigation("companies");
                });

            modelBuilder.Entity("AccountsWebApi.Models.Floor", b =>
                {
                    b.HasOne("AccountsWebApi.Models.Company", "companies")
                        .WithMany()
                        .HasForeignKey("companyId");

                    b.HasOne("AccountsWebApi.Models.Facility", "facilities")
                        .WithMany()
                        .HasForeignKey("facilityAutoId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("companies");

                    b.Navigation("facilities");
                });

            modelBuilder.Entity("AccountsWebApi.Models.Functionallocation", b =>
                {
                    b.HasOne("AccountsWebApi.Models.Company", "companies")
                        .WithMany()
                        .HasForeignKey("companyId");

                    b.HasOne("AccountsWebApi.Models.Facility", "facilities")
                        .WithMany()
                        .HasForeignKey("facilityAutoId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("AccountsWebApi.Models.Floor", "floors")
                        .WithMany()
                        .HasForeignKey("floorAutoId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("AccountsWebApi.Models.SubDepartment", "subDepartment")
                        .WithMany()
                        .HasForeignKey("subDeptAutoId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("companies");

                    b.Navigation("facilities");

                    b.Navigation("floors");

                    b.Navigation("subDepartment");
                });

            modelBuilder.Entity("AccountsWebApi.Models.Methodtype", b =>
                {
                    b.HasOne("AccountsWebApi.Models.Company", "companies")
                        .WithMany()
                        .HasForeignKey("companyId");

                    b.Navigation("companies");
                });

            modelBuilder.Entity("AccountsWebApi.Models.Position", b =>
                {
                    b.HasOne("AccountsWebApi.Models.Company", "companies")
                        .WithMany()
                        .HasForeignKey("companyId");

                    b.Navigation("companies");
                });

            modelBuilder.Entity("AccountsWebApi.Models.Priority", b =>
                {
                    b.HasOne("AccountsWebApi.Models.Company", "companies")
                        .WithMany()
                        .HasForeignKey("companyId");

                    b.Navigation("companies");
                });

            modelBuilder.Entity("AccountsWebApi.Models.Profile", b =>
                {
                    b.HasOne("AccountsWebApi.Models.Company", "companies")
                        .WithMany()
                        .HasForeignKey("companyId");

                    b.Navigation("companies");
                });

            modelBuilder.Entity("AccountsWebApi.Models.Role", b =>
                {
                    b.HasOne("AccountsWebApi.Models.Company", "companies")
                        .WithMany()
                        .HasForeignKey("companyId");

                    b.Navigation("companies");
                });

            modelBuilder.Entity("AccountsWebApi.Models.RoleandDepartment", b =>
                {
                    b.HasOne("AccountsWebApi.Models.Company", "companies")
                        .WithMany()
                        .HasForeignKey("companyId");

                    b.HasOne("AccountsWebApi.Models.Department", "department")
                        .WithMany()
                        .HasForeignKey("deptAutoId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("AccountsWebApi.Models.Role", "role")
                        .WithMany()
                        .HasForeignKey("roleAutoId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("companies");

                    b.Navigation("department");

                    b.Navigation("role");
                });

            modelBuilder.Entity("AccountsWebApi.Models.RoleandPermission", b =>
                {
                    b.HasOne("AccountsWebApi.Models.Company", "companies")
                        .WithMany()
                        .HasForeignKey("companyId");

                    b.HasOne("AccountsWebApi.Models.Permission", "permission")
                        .WithMany()
                        .HasForeignKey("permissionId");

                    b.HasOne("AccountsWebApi.Models.Role", "role")
                        .WithMany()
                        .HasForeignKey("roleAutoId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("companies");

                    b.Navigation("permission");

                    b.Navigation("role");
                });

            modelBuilder.Entity("AccountsWebApi.Models.RoleandUser", b =>
                {
                    b.HasOne("AccountsWebApi.Models.Company", "companies")
                        .WithMany()
                        .HasForeignKey("companyId");

                    b.HasOne("AccountsWebApi.Models.Role", "role")
                        .WithMany()
                        .HasForeignKey("roleAutoId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("AccountsWebApi.Models.User", "user")
                        .WithMany()
                        .HasForeignKey("userAutoId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("companies");

                    b.Navigation("role");

                    b.Navigation("user");
                });

            modelBuilder.Entity("AccountsWebApi.Models.SubDepartment", b =>
                {
                    b.HasOne("AccountsWebApi.Models.Company", "companies")
                        .WithMany()
                        .HasForeignKey("companyId");

                    b.HasOne("AccountsWebApi.Models.Department", "department")
                        .WithMany()
                        .HasForeignKey("deptAutoId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("companies");

                    b.Navigation("department");
                });

            modelBuilder.Entity("AccountsWebApi.Models.Tool", b =>
                {
                    b.HasOne("AccountsWebApi.Models.Company", "companies")
                        .WithMany()
                        .HasForeignKey("companyId");

                    b.Navigation("companies");
                });

            modelBuilder.Entity("AccountsWebApi.Models.Typeofmaintenance", b =>
                {
                    b.HasOne("AccountsWebApi.Models.Company", "companies")
                        .WithMany()
                        .HasForeignKey("companyId");

                    b.Navigation("companies");
                });

            modelBuilder.Entity("AccountsWebApi.Models.Typesofproblem", b =>
                {
                    b.HasOne("AccountsWebApi.Models.Company", "companies")
                        .WithMany()
                        .HasForeignKey("companyId");

                    b.Navigation("companies");
                });

            modelBuilder.Entity("AccountsWebApi.Models.User", b =>
                {
                    b.HasOne("AccountsWebApi.Models.Company", "companies")
                        .WithMany()
                        .HasForeignKey("companyId");

                    b.HasOne("AccountsWebApi.Models.Department", "department")
                        .WithMany()
                        .HasForeignKey("deptAutoId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("AccountsWebApi.Models.Employee", "employee")
                        .WithMany()
                        .HasForeignKey("employeeAutoId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("companies");

                    b.Navigation("department");

                    b.Navigation("employee");
                });

            modelBuilder.Entity("AccountsWebApi.Models.Userandprofile", b =>
                {
                    b.HasOne("AccountsWebApi.Models.Company", "companies")
                        .WithMany()
                        .HasForeignKey("companyId");

                    b.HasOne("AccountsWebApi.Models.Profile", "profiles")
                        .WithMany()
                        .HasForeignKey("profileAutoId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("AccountsWebApi.Models.User", "users")
                        .WithMany()
                        .HasForeignKey("userAutoId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("companies");

                    b.Navigation("profiles");

                    b.Navigation("users");
                });
#pragma warning restore 612, 618
        }
    }
}
